函数大全：http://www.cnblogs.com/prpl/p/5537417.html

numpy的一些预备知识
url: http://blog.csdn.net/huruzun/article/details/39801217
NumPy数组在创建时有固定的大小，不像Python列表（可动态增长）。改变一个ndarray的大小将创建一个新数组，并删除原有数组。

axis=1 表行，axis=0 表列   可以理解为1等于true
一维数组
np.array([1,2,3,4])
二维数组
y = np.array([[1,2,3],[4,5,6]])		#记得在最外面加上方括号[]

矩阵乘法：np.dot()  普通相乘(及相同位置的数相乘) *
取一列
x=[[1,2],[3,4]]
y=x[:,1]
print(y)
>>>[2,4]	#相当于取一列

>>> y  
array([2, 4])  
>>> y[0] = 10  
>>> y  
array([10,  4])  
>>> x  
array([[ 1, 10,  3],  
       [ 4,  4,  6]])  
通过上面可以发现改变y会改变x ，因而我们可以推断，y和x指向是同一块内存空间值，系统没有为y 新开辟空间把x值赋值过去

arr = np.arange(10)  	#相当于产生0到9的一个一维数组
arr  
Out[45]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])  
arr[4]  
Out[46]: 4   
arr[3:6]  
Out[47]: array([3, 4, 5])  
arr[3:6] = 12  
arr  
Out[49]: array([ 0,  1,  2, 12, 12, 12,  6,  7,  8,  9])  
重点：
当将一个标量赋值给切片时，该值会自动传播整个切片区域，这个跟列表最重要本质区别，数组切片是原始数组的视图，视图上任何修改直接反映到源数据上面
Numpy 设计是为了处理大数据，如果切片采用数据复制话会产生极大的性能和内存消耗问题

假如说需要的数组是一份副本而不是视图可以如下操作：
arr_copy = arr[3:6].copy()   
arr_copy[:]=24  
arr_copy
Out[54]: array([24, 24, 24])  
arr  
Out[55]: array([ 0,  1,  2, 12, 12, 12,  6,  7,  8,  9]) 
这里涉及到python 中的深浅拷贝，其中切片属于浅拷贝,list切片修改不会影响到原来的list

多维数组的索引和切片
arr2d = np.arange(1,10).reshape(3,3)  #产生三行三列的数组 (1,10)可以改成任意含有9个元素的范围，如（9）
arr2d  
Out[57]:   
array([[1, 2, 3],  
       [4, 5, 6],  
       [7, 8, 9]]) 
arr2d[0][2]  
Out[59]: 3  
arr2d[0,2]  
Out[60]: 3   
或者
p=np.array([1,2,3,4])	#先将列表转换成一维数组
>>> p.reshape(2,2)	#然后再转换成对应的二维数组
array([[1, 2],
       [3, 4]])

布尔型索引  可以通过布尔值来设置值
如：names = np.array(['Bob','joe','Bob','will']) 
names_bool=(names == 'Bob')
names_bool  
Out[70]: array([ True, False,  True, False], dtype=bool)  
或者
data[data < 0] = 0    #把data数组中所有小于0的元素都改为0
将数组以二进制形式格式保存到磁盘，np.save 、np.load 函数是读写磁盘的两个主要函数，默认情况下，数组以未压缩的原始二进制格式保存在扩展名为.npy的文件中
arr = np.arange(10)  
np.save('some_array',arr)  

np.load('some_array.npy')  
Out[80]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

存取文本文件：
文本中存放是聚类需要数据，直接可以方便读取到numpy array中，省去一行行读文件繁琐 
np.savetxt 执行相反的操作

numpy.linspace方法
例如，在从1到10中产生20个数： np.linspace(1,10,20)
使用numpy.zeros，numpy.ones，numpy.eye等方法可以构造特定的矩阵
还有许多矩阵方面的函数，要用时立刻查




pandas的基础知识
url：http://www.cnblogs.com/nxld/p/6058591.html
pandas中两类非常重要的数据结构:序列Series和数据框DataFrame
Series类似于numpy中的一维数组，除了通吃一维数组可用的函数或方法，而且其可通过索引标签的方式获取数据，还具有索引的自动对齐功能；
DataFrame类似于numpy中的二维数组，同样可以通用numpy数组的函数和方法，而且还具有其他灵活应用

序列的创建主要有三种方式：
1）通过一维数组创建序列
2）通过字典的方式创建序列
3）通过DataFrame中的某一行或某一列创建序列
数据框的创建：
1）通过二维数组创建数据框
2）通过字典的方式创建数据框
3）通过数据框的方式创建数据框

数据索引index：
通过索引值或索引标签获取数据
自动化对齐
利用pandas查询数据（主要用于数据框）
查询行 df.ix[[1,3,4]]  df.ix[1]  df.ix[1:3]  df.ix[将前面数字的位置改为行的索引值]
查询列 df[列名] 如果是多个列，再多加一个[]  如：df[[name1,name2,...]]
取某行某列的值：
df.ix[行，列名] 行和列名可以是单个，也可以是多个，多个外面加一个[]
df.ix[行][列名]	同上
通过布尔索引实现数据的子集查询
如：student[(student['Sex']=='F') & (student['Age']>12)]

统计数据分析，现用现查

类似SQL的操作
1、增（此处是数据框，序列没试过）
行
将student2中的数据新增到student中，可以通过concat函数实现：
stu3=pd.concat([stu,stu2])
列
如stu中新添加列，没有赋值，默认为nan

2、删
数据框stu
del 数据框名
删除指定行
stu.drop([行的索引值，可以多个])
根据布尔索引删除行数据，其实这个删除就是保留删除条件的反面数据

删除指定列
stu.drop([列名，可以多个],axis=1)
pd.DataFrame(stu,columns=['age','name',..旧的列名，可以不全,..要添加的列名])
不论是删除行还是删除列，都可以通过drop方法实现，只需要设定好删除的轴即可，即调整drop方法中的axis参数。默认该参数为0，表示删除行观测，如果需要删除列变量，则需设置为1。

3、改
跟第一种取值差不多
如 stu.ix[1,2]=新值   #得用这个才行


五、聚合、排序和多表连接操作要用直接查

六、缺失值处理
常用的有三大类方法，即删除法、填补法和插值法
缺失值的序列，我们可以结合sum函数和isnull函数来检测数据中含有多少缺失值：
默认情况下，dropna会删除任何含有缺失值的行，如：stu.dropna()
使用一个常量来填补缺失值，可以使用fillna函数实现简单的填补工作 如：stu.fillna(值或方法)

七、数据透视表   现查
八、多层索引的使用   同上



