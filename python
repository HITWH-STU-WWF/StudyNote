对于Python中的”@”语法糖，装饰器的调用顺序与使用 @ 语法糖声明的顺序相反。
@deco_1
@deco_2
addFunc(3, 8) = deco_1(deco_2(addFunc(3, 8)))

在Python中有三个内置的装饰器，都是跟class相关的：staticmethod、classmethod 和property。
staticmethod 是类静态方法，其跟成员方法的区别是没有 self 参数，并且可以在类不进行实例化的情况下调用
classmethod 与成员方法的区别在于所接收的第一个参数不是 self （类实例的指针），而是cls（当前类的具体类型）
property 是属性的意思，表示可以通过通过类实例直接访问的信息


长轮询
启动redis的命令：
1
sudo /etc/init.d/redis-server start
关闭redis的命令：
1
sudo /etc/init.d/redis-server stop
重启redis的命令：
1
sudo /etc/init.d/redis-server restart



   def post(self, *args, **kwargs):

        username = self.get_argument('name')
        password = self.get_argument('pwd')
        if username == 'wupeiqi' and password == '123': #进行用户判断

            self.my_session['c_user'] = 'chenchao'
            self.my_session['c_card'] = '123.com'

            self.redirect('/index')
        else:
            self.render('login.html', **{'status': '用户名或密码错误'})


数据转换成json类型
import json
json.dumps(datas)
当datas中含有中文等非ascii字符时，可以使用如下参数：
json.dumps(datas, ensure_ascii=False)
如果想美化输出格式，可以使用indent参数：
json.dumps(datas, indent=4)


your_list.index('your_item')取列表中某个元素的下标


divmod(a, b):
本函数是实现a除以b，然后返回商与余数的元组。如果两个参数a,b都是整数，那么会采用整数除法，结果相当于（a//b, a % b)。
如果a或b是浮点数，相当于（math.floor(a/b), a%b)。


cmp(x,y)
cmp(x,y) 函数用于比较2个对象，如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1


strA = "abcdegfgijlk"  
strA[::-1] 		字符串逆序
s*r * (r < 2**31)	像这个最后一个部分是一个条件判断语句，对返回1,否则返回0 相当于判断 r 是否小于2的31次方
 
把一个列表里的元素全部替换成同一个元素，下例里把 ‘3’ 和 ‘4’ 都替换成’d‘：
lst = ['1', '2', '3', '4', '5']
>>> pattern = ['3', '4']
>>> rep = ['d' if x in pattern else x for x in lst]
怎样替换的关键在于if后面的条件部分，如  '1' if==‘d’else......

python中列表append的进去的是append进去的那个对象的地址好像（如果是同一种类型的，比如字典），具体自己测试（看获取教务处成绩代码）

python assert断言是声明其布尔值必须为真的判定，如果发生异常就说明表达示为假。可以理解assert断言语句为raise-if-not，用来测试表示式，其返回值为假，就会触发异常。
assert 1==1
为assert断言语句添加异常参数
assert expression [, arguments]
如：
assert len(lists) >=5,'列表元素个数小于5'


字符串转字典
用eval()或exec()函数实现：
>>> user
"{'name' : 'jim', 'sex' : 'male', 'age': 18}"
>>> b=eval(user)
>>> b
{'age': 18, 'name': 'jim', 'sex': 'male'}
>>> exec("c="+user)
>>> c
{'age': 18, 'name': 'jim', 'sex': 'male'}

对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值
例如：
list1 = ["这", "是", "一个", "测试"]
for i in range (len(list1)):
    print i ,list1[i]
>>>
0 这
1 是
2 一个
3 测试
或者
or index, item in enumerate(list1, 1):
    print index, item
>>>
1 这
2 是
3 一个
4 测试


os模块学习：  url：http://www.cnblogs.com/MnCu8261/p/5483657.html
os，语义为操作系统，所以肯定就是操作系统相关的功能了，可以处理文件和目录这些我们日常手动需要做的操作，就比如说：显示当前目录下所有文件/删除某个文件/获取文件大小……

1  os.name      #显示当前使用的平台
>>> os.name
'nt'                  #这表示Windows
>>> os.name
'posix'             #这表示Linux

2  os.getcwd()      #显示当前python脚本工作路径
os.getcwd()
'/root'         #Linux平台在/root目录直接使用python3命令

3  os.listdir('dirname')        #返回指定目录下的所有文件和目录名
>>> os.listdir()	#不带参数，相当于显示os.getcwd路径下的文件和目录
['.idea', 'test']

4  os.remove('filename')       #删除一个文件
5  os.makedirs('dirname/dirname')     #可生成多层递规目录 相当于生成目录，可一次生成多级目录
6  os.rmdir('dirname')     #删除单级目录，要求被删除的目录必须为空
7  os.rename("oldname","newname")    #重命名文件
8  os.system()    #运行shell命令,注意：这里是打开一个新的shell，运行命令，当命令结束后，关闭shell 不懂
9  os.sep    #显示当前平台下路径分隔符
10 os.linesep    #给出当前平台使用的行终止符
12  os.path.abspath(path)    #显示当前绝对路径  优先在当前运行目录下搜索
13  os.path.dirname(path)    #返回该路径的父目录		注意此时输入的path是文件路径
 os.path.dirname(os.path.abspath('test'))
'C:\\Users\\Capital-D\\PycharmProjects\\untitled'
15  os.path.isfile(path)     #如果path是一个文件，则返回True
16  os.path.isdir(path)    #如果path是一个目录，则返回True



重点：python基础之socket与socketserver:  url:http://www.cnblogs.com/MnCu8261/p/5546823.html
Socket的英文原义是“孔”或“插座”，在Unix的进程通信机制中又称为‘套接字
应用程序通常通过"套接字"向网络发出请求或者应答网络请求
套接字的作用之一就是用来区分不同应用进程

一、socket  
编写服务器端
1  创建套接字		s1=socket.socket(family,type)
2  绑定套接字		s1.bind( address ) 
3  监听套接字		s1.listen( backlog )
4  等待接受连接		connection, address = s1.accept()
5  处理阶段		connection.recv(bufsize[,flag])		connection.send(string[,flag])
6  传输结束，关闭连接	s1.close()
编写客户端
1  创建socket对象	s2=socket.socket()
2  连接至服务器端	s2.connect(address)
3  处理阶段		s2.recv(bufsize[,flag])		s2.send(string[,flag])
4  连接结束，关闭套接字	s2.close()

二、socketserver
SocketServer模块也 是Python标准库中很多服务器框架的基础
socketserver在python2中为SocketServer,在python3种取消了首字母大写，改名为socketserver
socketserver中包含了两种类，一种为服务类（server class），一种为请求处理类（request handle class）。
前者(server class)提供了许多方法：像绑定，监听，运行…… （也就是建立连接的过程） 
后者(request handle class)则专注于如何处理用户所发送的数据（也就是事务逻辑）
一般情况下，所有的服务，都是先建立连接，也就是建立一个服务类的实例，然后开始处理用户请求，也就是建立一个请求处理类的实例


重点：python的位置参数、默认参数、关键字参数、可变参数区别  url: http://www.cnblogs.com/bingabcd/p/6671368.html
1、位置参数
调用函数时根据函数定义的参数位置来传递参数
参数的顺序必须一一对应，且少一个参数都不可以
2、关键字参数
函数调用，通过“键-值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求
有位置参数时，位置参数必须在关键字参数的前面（就是不带关键字的参数，必须放在最前面，且只能有一个，而且一般要求是第一个参数，尽量不要混用），但关键字参数之间不存在先后顺序的
3、默认参数
用于定义函数，为参数提供默认值，调用函数时可传可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）
# 正确的默认参数定义方式--> 位置参数在前，默认参数在后
def print_hello(name, sex=1):
4、可变参数
定义函数时，有时候我们不确定调用的时候会传递多少个参数(不传参也可以)。此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。
  	包裹位置传递
		def func(*args):
		# func()
		# func(a)
		# func(a, b, c)
		我们传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是包裹位置传递。
	包裹关键字传递
		def func(**kargs):
		# func(a=1)
		# func(a=1, b=2, c=3)
5、解包裹参数,直接看
注意：位置参数、默认参数、可变参数的混合使用
基本原则是：先位置参数，默认参数，包裹位置，包裹关键字(定义和调用都应遵循)

*args 表示任何多个无名参数，它是一个tuple；**kwargs 表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前	这两个是Python中的可变参数

*args：
　　重点在*，后面的args相当于一个变量名，可以自己定义的。它的本质就是将标准调用剩下的值集中转变为元组。
*args与位置参数和默认参数混用:*args要放到位置参数后面，默认参数要放最后。

**kwargs（输出字典）
重点在**，后面的kwargs相当于一个变量名，可以自己定义的。它的本质就是将关键字调用剩下的值集中转变为字典
**kwargs与位置参数和默认参数混用：**kwargs得放在最后
#使用默认参数时，注意默认参数的位置要在args之后kwargs之前	!!重点
def foo(x,a=4,*args,**kwargs):　　##注意：当需要修改默认参数时，要调整默认参数的位置，要放在args之前即可，但不可放在开头。

小结：
位置参数：
调用函数时所传参数的位置必须与定义函数时参数的位置相同
关键字参数：
使用关键字参数会指定参数值赋给哪个形参，调用时所传参数的位置可以任意
*位置参数：可接受任意数量的位置参数(元组)；只能作为最后一个位置参数出现，其后参数均为关键字参数
**关键字参数：可接受任意数量的关键字参数(字典)；只能作为最后一个参数出现
默认参数：默认参数的赋值只会在函数定义的时候绑定一次，默认值不会再被修改

三、class
类是创建实例的模板，而实例则是一个一个具体的对象
类中的成员方法中的self参数可以理解为是：类实例的指针（对应一个类实例，调用的属性是该实例的）
类中的类方法中的cls参数可以理解为是：cls（当前类的具体类型，调用的是当前类的属性，不是具体一个实例的属性）
MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。

定制类：如：__getitem__

在python中继承中的一些特点：
1：在继承中基类的构造（__init__()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。使用super().__init__()或parentClassName.__init__()
2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时并不需要带上self参数
3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。
如果在继承元组中列了一个以上的类，那么它就被称作"多重继承" 


可以自由地给一个实例变量绑定属性，比如，给实例bart绑定一个name属性
如：stu=student()  stu.name='xiaowang'   #name是原本student()不具备的
和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同,如上给一个实例新增属性，而其他实例并没有

由于类可以起到模板的作用，因此，可以在创建实例的时候，可以把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的__init__方法，在创建实例的时候，就把那些属性绑上去

如果要让类内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问

需要注意的是，在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量

url:http://www.cnblogs.com/pengsixiong/p/4823473.html
类的属性分为实例属性与类属性  （类属性定义在__init__外面）
类的方法分为普通方法，类方法，静态方法
静态方法：@staticmethod  
类方法：@classmethod
静态方法与类方法都可以通过类或者实例来调用。其两个的特点都是不能够调用实例属性----->注意

总结：类属性与类方法是类固有的方法与属性，不会因为实例不同而改变，写他们的目的是减少多实例时所创造出来的内存空间，加快运行速度

大家可能对Python中的__init__方法很熟悉，认为他是实例化类时调用的第一个方法。但其实他并不是。实例化时调用的第一个方法其实是__new__方法
定义类时，只要继承了asd类(含有initialize方法)，就会将initialize方法作为初始化方法（可以这样理解）


四:python装饰器		url:http://python.jobbole.com/82344/
装饰模式有很多经典的使用场景，例如插入日志、性能测试、事务处理等等，有了装饰器，就可以提取大量函数中与本身功能无关的类似代码，从而达到代码重用的目的。
使用了”@”语法糖后，我们就不需要额外代码来给”myfunc”重新赋值了，其实”@deco”的本质就是”myfunc = deco(myfunc)”
对于被装饰函数需要支持参数的情况，我们只要使装饰器的内嵌函数支持同样的签名即可
如果多个函数拥有不同的参数形式，怎么共用同样的装饰器？在Python中，函数可以支持(*args, **kwargs)可变参数，所以装饰器可以通过可变参数形式来实现内嵌函数的签名

装饰器本身也可以支持参数
如果装饰器本身需要支持参数，那么装饰器就需要多一层的内嵌函数
装饰器是可以叠加使用的，那么这是就涉及到装饰器调用顺序了。对于Python中的”@”语法糖，装饰器的调用顺序与使用 @ 语法糖声明的顺序相反	
#也不能说绝对相反，在第一层函数是相反的，第二层就是按顺序的，即可以理解为越靠近函数的装饰器，其最外层越先执行,等外层的都执行完，然后再执行里层的，里层的是越远的（即越先调用的）越先执行
在Python中有三个内置的装饰器，都是跟class相关的：staticmethod、classmethod 和property。

staticmethod 是类静态方法，其跟成员方法的区别是没有 self 参数，并且可以在类不进行实例化的情况下调用
classmethod 与成员方法的区别在于所接收的第一个参数不是 self （类实例的指针）而是cls（当前类的具体类型）
property 是属性的意思，表示可以通过通过类实例直接访问的信息(getter和setter方法)  
property: url:http://python.jobbole.com/80955/
@property广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性
url:https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143186781871161bc8d6497004764b398401a401d4cce000


五、文件读取：
在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）
 f = open('/Users/michael/test.txt', 'r')	以'r/rb'打开的文件要求必须存在，以'w/wb'打开的文件，如果不存在则自动创建
文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的
由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try ... finally来实现
但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：
with open('/path/to/file', 'r') as f:
    print(f.read())
这和前面的try ... finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法
前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用'rb'模式打开文件即可	f = open('/Users/michael/test.jpg', 'rb')
要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：
>>> f = open('/Users/michael/gbk.txt', 'r', encoding='gbk')
当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘

把变量从内存中变成可存储或传输的过程称之为序列化
比如把name改成'Bill'，但是一旦程序结束，变量所占用的内存就被操作系统全部回收。如果没有把修改后的'Bill'存储到磁盘上，下次重新运行程序，变量又被初始化为'Bob'
json.dumps()中有一个default参数，可以决定如何序列化成json,具体百度
			
六、多进程和多线程
url:https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431927781401bb47ccf187b24c3b955157bb12c5882d000
创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步

1、多进程：
multiprocessing
Pool
子进程
进程间通信
小结：
在Unix/Linux下，可以使用fork()调用实现多进程。
要实现跨平台的多进程，可以使用multiprocessing模块。
进程间通信是通过Queue、Pipes等实现的

2、多线程
Lock
多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了
当某个线程开始执行change_it()时，我们说，该线程因为获得了锁，因此其他线程不能同时执行change_it()，只能等待，直到锁被释放后，获得该锁以后才能改。由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。创建一个锁就是通过threading.Lock()来实现
Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。

在多线程环境下，每个线程都有自己的数据。一个线程使用自己的局部变量比使用全局变量好，因为局部变量只有线程自己能看见，不会影响其他线程，而全局变量的修改必须加锁。
但是局部变量也有问题，就是在函数调用的时候，传递起来很麻烦,解决办法如下：
用一个全局dict存放所有的Student对象，然后以thread自身作为key获得线程对应的Student对象，但是，每个函数获取std的代码有点丑。ThreadLocal应运而生，不用查找dict，ThreadLocal帮你自动做这件事
ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源-------重点，明天测试下!!!!!!!!
小结：
一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题。


要实现多任务，通常我们会设计Master-Worker模式，Master负责分配任务，Worker负责执行任务
多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）
多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。
无论是多进程还是多线程，只要数量一多，效率肯定上不去,因为要进行线程/进程切换

计算密集型任务的特点是要进行大量的计算，消耗CPU资源。要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数,且对于计算密集型任务，最好用C语言编写
IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度,对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。

考虑到CPU和IO之间巨大的速度差异，一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型会导致别的任务无法并行执行，因此，我们才需要多进程模型或者多线程模型来支持多任务并发执行。

对应到Python语言，单线程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序

小结：
多线程编程，模型复杂，容易发生冲突，必须用锁加以隔离，同时，又要小心死锁的发生。
Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。-----注意是无法利用多核，并不是不能执行多线程


不用什么函数，直接将当前时间格式化成字符串然后转换成整数进行比较。 
如下表示当前时间在09：35：10与15：01：01之间。
150101 > int(time.strftime("%H%M%S")) > 93510


传数据的时候，如果有时间类型（datetime）的，要记得先转换成字符串类型的，再传
eval也能够把字符串转成字典

七、网络编程
网络通信就是两个进程之间在通信-----可以这样认为

作为服务器，提供什么样的服务，端口号就必须固定下来。由于我们想要访问网页，因此新浪提供网页服务的服务器必须把端口号固定在80端口，因为80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用
Z
用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。
同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。

八、电子邮件
子邮件软件MUA：Mail User Agent——邮件用户代理
MTA：Mail Transfer Agent——邮件传输代理，就是那些Email服务提供商，比如网易、新浪等等
最终目的地MDA：Mail Delivery Agent——邮件投递代理
未完。。。。

九、web开发
Client/Server模式简称CS架构
Browser/Server模式简称BS架构

Web开发经历了好几个阶段：
1、静态Web页面
2、CGI
3、ASP/JSP/PHP
4、MVC：Model-View-Controller，中文名“模型-视图-控制器”
发展中....
Content-Type指示响应的内容，这里是text/html表示HTML网页。请注意，浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐。浏览器并不靠URL来判断响应的内容，所以，即使URL是http://example.com/abc.jpg，它也不一定就是图片
如果是POST，那么请求还包括一个Body，包含用户数据。
步骤2：服务器向浏览器返回HTTP响应，响应包括：
响应代码：200表示成功，3xx表示重定向，4xx表示客户端发送的请求有错误，5xx表示服务器端处理时发生了错误；
响应类型：由Content-Type指定；
无数个站点互相链接起来，就形成了World Wide Web，简称WWW
每个HTTP请求和响应都遵循相同的格式，一个HTTP包含Header和Body两部分，其中Body是可选的
当存在Content-Encoding时，Body数据是被压缩的，最常见的压缩方式是gzip，所以，看到Content-Encoding: gzip时，需要将Body数据先解压缩，才能得到真正的数据。压缩的目的在于减少Body的大小，加快网络传输	
注意:根本意义上说，服务器返回的数据都应该是字节，因为数据的传输是依靠这tcp和udp协议传输的，而这两个协议传输的数据都是字节流，所以在写底层的数据传输时，记得将要返回的数据转换成字节，再传输,我们使用的web框架没有强制要求，可能是因为帮我们把数据进行处理了，处理成字节了
WSGI接口：Web Server Gateway Interface
无论多么复杂的Web应用程序，入口都是一个WSGI处理函数。HTTP请求的所有输入信息都可以通过environ获得，HTTP响应的输出都可以通过start_response()加上函数返回值作为Body。
复杂的Web应用程序，光靠一个WSGI函数来处理还是太底层了，我们需要在WSGI之上再抽象出Web框架，进一步简化Web开发。
<h1>hello {{name}}</h1>
Python处理URL的函数就是C：Controller，Controller负责业务逻辑，比如检查用户名是否存在，取出用户信息等等；
包含变量{{ name }}的模板就是V：View，View负责显示逻辑，通过简单地替换一些变量，View最终输出的就是用户看到的HTML。
MVC中的Model在哪？Model是用来传给View的，这样View在替换变量的时候，就可以从Model中取出相应的数据。
如上面的例子Model就是一个dict：{ 'name': 'Michael' }


十、异步IO
我们已经知道，CPU的速度远远快于磁盘、网络等IO。在一个线程中，CPU执行代码的速度极快，然而，一旦遇到IO操作，如读写文件、发送网络数据时，就需要等待IO操作完成，才能继续进行下一步操作。这种情况称为同步IO。在IO操作的过程中，当前线程被挂起，而其他需要CPU执行的代码就无法被当前线程执行了
多线程和多进程的模型虽然解决了并发问题，但是系统不能无上限地增加线程。由于系统切换线程的开销也很大，所以，一旦线程数量过多，CPU的时间就花在线程切换上了，真正运行代码的时间就少了，结果导致性能严重下降。
由于我们要解决的问题是CPU高速执行能力和IO设备的龟速严重不匹配，多线程和多进程只是解决这一问题的一种方法。
另一种解决IO问题的方法是异步IO。当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。一段时间后，当IO返回结果时，再通知CPU进行处理。
异步IO模型需要一个消息循环，在消息循环中，主线程不断地重复“读取消息-处理消息”这一过程：
loop = get_event_loop()
while True:
    event = loop.get_event()
    process_event(event)
消息模型：
消息模型其实早在应用在桌面应用程序中了。一个GUI程序(图形界面程序)的主线程就负责不停地读取消息并处理消息。所有的键盘、鼠标等消息都被发送到GUI程序的消息队列中，然后由GUI程序的主线程处理。
由于GUI线程处理键盘、鼠标等消息的速度非常快，所以用户感觉不到延迟。某些时候，GUI线程在一个消息处理的过程中遇到问题导致一次消息处理时间过长，此时，用户会感觉到整个GUI程序停止响应了，敲键盘、点鼠标都没有反应。这种情况说明在消息模型中，处理一个消息必须非常迅速，否则，主线程将无法及时处理消息队列中的其他消息，导致程序看上去停止响应
在异步IO模型下，一个线程就可以同时处理多个IO请求，并且没有切换线程的操作。对于大多数IO密集型的应用程序，使用异步IO将大大提升系统的多任务处理能力

学习异步IO模型前，我们先来了解协程
协程，又称微线程，纤程。英文名Coroutine
子程序，或者称为函数，在所有语言中都是层级调用，所以子程序调用是通过栈实现的，一个线程就是执行一个子程序
子程序调用总是一个入口，一次返回，调用顺序是明确的。而协程的调用和子程序不同。
协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。
注意，在一个子程序中中断，去执行其他子程序，不是函数调用，有点类似CPU的中断。
协程的特点在于是一个线程执行
协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。
Python对协程的支持是通过generator实现的


asyncio 
asyncio的编程模型就是一个消息循环。我们从asyncio模块中直接获取一个EventLoop的引用，然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO  
由打印的当前线程名称可以看出，两个coroutine（协程）是由同一个线程并发执行的。
如果把asyncio.sleep()换成真正的IO操作，则多个coroutine就可以由一个线程并发执行。

小结
asyncio提供了完善的异步IO支持；
异步操作需要在coroutine中通过yield from完成；
多个coroutine可以封装成一组Task然后并发执行。
用asyncio提供的@asyncio.coroutine可以把一个generator标记为coroutine类型，然后在coroutine内部用yield from调用另一个coroutine实现异步操作

async和await
为了简化并更好地标识异步IO，从Python 3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读
请注意，async和await是针对coroutine的新语法，要使用新的语法，只需要做两步简单的替换：
把@asyncio.coroutine替换为async；
把yield from替换为await。
如在之前学的那个例子里：
@asyncio.coroutine
def hello():
    print("Hello world!")
    r = yield from asyncio.sleep(1)
    print("Hello again!")
用新语法重新编写如下：
async def hello():
    print("Hello world!")
    r = await asyncio.sleep(1)
    print("Hello again!")
其余部分保持不变

在协程中，不能调用普通的同步IO操作，因为所有用户都是由一个线程服务的，协程的执行速度必须非常快，才能处理大量用户的请求。而耗时的IO操作不能在协程中以同步的方式调用，否则，等待一个IO操作时，系统无法响应任何其他用户。
这就是异步编程的一个原则：一旦决定使用异步，则系统每一层都必须是异步，“开弓没有回头箭”。


十一、生成器

一个生成器中可以有多个yield语句，而且返回的数据可以是不同的,并且可以有return语句
一个生成器创建之后，一旦使用完之后，就不可以再次使用了，要再次使用，需要再次创建一个
通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的
如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator
要创建一个generator，有很多种方法
1、第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
如：L = [x * x for x in range(10)]---->改成 g = (x * x for x in range(10))
如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
我们创建了一个generator后，基本上永远不会调用next()，而是通过for循环来迭代它，并且不需要关心StopIteration的错误
2、如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：

最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。
上面这句话的理解：生成器函数在创建时候并不运行内部的代码，而函数在创建的时候，会自动运行内部的代码。例如 a=test()#test()为一个生成器函数 ,并不运行函数test()内部的代码，而只有调用了next()函数的时候，才开始运行test()内部的代码，运行到yield语句处（记为addr1）返回，停止运行，下次再次调用next()函数时，从addr1位置继续往下执行，直到结束（如果调用next()往下执行，但之后没有yield语句了，这会报StopIteration的错误），或者到达下一次yield语句处,如果使用for循环，在第一次和最后一次循环会略有点不同（最后一次不同是由于第一次不同引起的），如果是最后一次到达yield语句，且yield语句不是放在最后面，则会自动执行到代码结束，而不是停留在yield语句那个地方,如果是第一次，则会在执行for循环之前，先将代码执行到yield语句前一句(addr)，然后在for循环中从addr位置开始往下调用(可以近似理解成已经先运行一次next()函数，只是值还没有被取走),与使用next()语句不同的地方，注意
但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：
>>> g = fib(6)
>>> while True:
...     try:
...         x = next(g)
...         print('g:', x)
...     except StopIteration as e:
...         print('Generator return value:', e.value)
...         break


小结：
要理解generator的工作原理，它是在for循环的过程中不断计算出下一个元素，并在适当的条件结束for循环。对于函数改成的generator来说，遇到return语句或者执行到函数体最后一行语句，就是结束generator的指令，for循环随之结束。

生成器对象是一个迭代器。但是它比迭代器对象多了一些方法，它们包括send方法，throw方法和close方法。这些方法，主要是用于外部与生成器对象的交互。!!!重点
例子如下：
def MyGenerator():  
    value = (yield 1)  
    value = (yield value)  
    
gen = MyGenerator()  
print gen.next()  
print gen.send(2)  
print gen.send(3)  
对于赋值语句而言，如：value=yield 1，因为代码时从右边执行，执行完再赋值给左边，而右边时yield语句，因此当调用gen.next()方法时，Python首先会执行MyGenerator方法的yield 1语句。由于是一个yield语句，因此方法的执行过程被挂起，而next方法返回值为yield关键字后面表达式的值，即为1
当调用gen.send(2)方法时，python首先恢复MyGenerator方法的运行环境。同时，将表达式(yield 1)的返回值更改为send方法传递的参数值并赋值给value(该处体现了send方法用于外部与生成器对象的交互)，即为2。这样，接下来value=（yield 1）这一赋值语句会将value的值置为2。继续运行会遇到yield value语句。因此，MyGenerator方法再次被挂起。send方法的返回值（该方法也是有返回值的）为yield关键字后面表达式的值，即value的值，为2
总的来说，send方法和next方法唯一的区别是在执行send方法会首先把上一次挂起的yield语句的返回值通过参数设定，从而实现与生成器方法的交互。但是需要注意，在一个生成器对象没有执行next方法之前，由于没有yield语句被挂起，所以执行send方法会报错,或者可以gen.send(None)，因为当send方法的参数为None时，它与next方法完全等价。但是注意，虽然上面的代码可以接受，但是不规范。所以，在调用send方法之前，还是先调用一次next方法为好。


yield from  参考地址：http://blog.theerrorlog.com/yield-from-in-python-3.html	重点！！！！
yield from的前世今生都在 这个PEP里面，总之大意是原本的yield语句只能将CPU控制权 还给直接调用者，当你想要将一个generator或者coroutine里带有 yield语句的逻辑重构到另一个generator（原文是subgenerator） 里的时候，会非常麻烦，因为外面的generator要负责为里面的 generator做消息传递；所以某人有个想法是让python把消息传递 封装起来，使其对程序猿透明，于是就有了yield from

假设A函数中有这样一个语句
yield from B()
B()返回的是一个可迭代（iterable）的对象b，那么A()会返回一个 generator——照我们的命名规范，名字叫a——那么：

b迭代产生的每个值都直接传递给a的调用者。
所有通过send方法发送到a的值都被直接传递给b. 如果发送的 值是None，则调用b的__next__()方法，否则调用b的send 方法。如果对b的方法调用产生StopIteration异常，a会继续 执行yield from后面的语句，而其他异常则会传播到a中，导 致a在执行yield from的时候抛出异常。
如果有除GeneratorExit以外的异常被throw到a中的话，该异常 会被直接throw到b中。如果b的throw方法抛出StopIteration， a会继续执行；其他异常则会导致a也抛出异常。
如果一个GeneratorExit异常被throw到a中，或者a的close 方法被调用了，并且b也有close方法的话，b的close方法也 会被调用。如果b的这个方法抛出了异常，则会导致a也抛出异常。 反之，如果b成功close掉了，a也会抛出异常，但是是特定的  GeneratorExit异常。
a中yield from表达式的求值结果是b迭代结束时抛出的  StopIteration异常的第一个参数。
b中的return <expr>语句实际上会抛出StopIteration(<expr>) 异常，所以b中return的值会成为a中yield from表达式的返回值。
为神马会有这么多要求？因为generator这种东西的行为在加入throw 方法之后变得非常复杂，特别是几个generator在一起的情况，需要 类似进程管理的元语对其进行操作。上面的所有要求都是为了统一 generator原本就复杂的行为，自然简单不下来啦。


十二、迭代器
可以直接作用于for循环的对象统称为可迭代对象：Iterable
可以使用isinstance()判断一个对象是否是Iterable对象：	isinstance([], Iterable)
可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator
可以使用isinstance()判断一个对象是否是Iterator对象：	 isinstance([], Iterator)
生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator
Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。
小结：
凡是可作用于for循环的对象都是Iterable类型；
凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；
集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。
Python的for循环本质上就是通过不断调用next()函数实现的，例如：
for x in [1, 2, 3, 4, 5]:
    pass
实际上完全等价于：
# 首先获得Iterator对象:
it = iter([1, 2, 3, 4, 5])
# 循环:
while True:
    try:
        # 获得下一个值:
        x = next(it)
    except StopIteration:
        # 遇到StopIteration就退出循环
        break
把list、dict、str等Iterable变成Iterator可以使用iter()函数


十三、异常错误处理
高级语言通常都内置了一套try...except...finally...的错误处理机制，Python也不例外
当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块，执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完毕,如果没有错误发生，则except语句块不会被执行，但是finally如果有，则一定会被执行（可以没有finally语句）。
此外，如果没有错误发生，可以在except语句块后面加一个else，当没有错误发生时，会自动执行else语句：
try:
    print('try...')
    r = 10 / int('2')
except ZeroDivisionError as e:
    print('ZeroDivisionError:', e)
else:
    print('no error!')
finally:
    print('finally...')
print('END')
Python的错误其实也是class，所有的错误类型都继承自BaseException，所以在使用except时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”。比如：
try:
    foo()
except ValueError as e:
    print('ValueError')
except UnicodeError as e:
    print('UnicodeError')
第二个except永远也捕获不到UnicodeError，因为UnicodeError是ValueError的子类，如果有，也被第一个except给捕获了。
Python所有的错误都是从BaseException类派生的，常见的错误类型和继承关系看这里：https://docs.python.org/3/library/exceptions.html#exception-hierarchy

try:
        bar('0')
    except Exception as e:
        print('Error:', e)		则e表示的时出错的原因，再调试代码时，可以用这个语句，比较实用！！！！！！

不需要在每个可能出错的地方去捕获错误，只要在合适的层次去捕获错误就可以了。这样一来，就大大减少了写try...except...finally的麻烦

调用堆栈
如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出。
出错并不可怕，可怕的是不知道哪里出错了。解读错误信息是定位错误的关键。--->可以借助栈的思想，后进先出，一般错误会在后面输出，不一定


记录错误
如果不捕获错误，自然可以让Python解释器来打印出错误堆栈，但程序也被结束了。既然我们能捕获错误，就可以把错误堆栈打印出来，然后分析错误原因，同时，让程序继续执行下去。
Python内置的logging模块可以非常容易地记录错误信息
如： try:
        bar('0')
    except Exception as e:
        logging.exception(e)
同样是出错，但程序打印完错误信息后会继续执行，并正常退出
通过配置，logging还可以把错误记录到日志文件里，方便事后排查。


抛出错误
因为错误是class，捕获一个错误就是捕获到该class的一个实例。因此，错误并不是凭空产生的，而是有意创建并抛出的。Python的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出错误。
如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后，用raise语句抛出一个错误的实例：
只有在必要的时候才定义我们自己的错误类型。如果可以选择Python已有的内置的错误类型（比如ValueError，TypeError），尽量使用Python内置的错误类型

在bar()函数中，我们明明已经捕获了错误，但是，打印一个ValueError!后，又把错误通过raise语句抛出去了，这不有病么？
其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。好比一个员工处理不了一个问题时，就把问题抛给他的老板，如果他的老板也处理不了，就一直往上抛，最终会抛给CEO去处理。
raise语句如果不带参数，就会把当前错误原样抛出。此外，在except中raise一个Error，还可以把一种类型的错误转化成另一种类型

程序调试
第一种常用的：print
第二种：断言
凡是用print()来辅助查看的地方，都可以用断言（assert）来替代：
def foo(s):
    n = int(s)
    assert n != 0, 'n is zero!'
    return 10 / n
def main():
    foo('0')

assert的意思是，表达式n != 0应该是True，否则，根据程序运行的逻辑，后面的代码肯定会出错。
如果断言失败，assert语句本身就会抛出AssertionError：
$ python3 err.py
Traceback (most recent call last):
  ...
AssertionError: n is zero!

程序中如果到处充斥着assert，和print()相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：
关闭后，你可以把所有的assert语句当成pass来看。

第三种：logging	具体现查
把print()替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件：

小结
Python内置的try...except...finally用来处理错误十分方便。出错时，会分析错误信息并定位错误发生的代码位置才是最关键的。
程序也可以主动抛出错误，让调用者来处理相应的错误。但是，应该在文档中写清楚可能会抛出哪些错误，以及错误产生的原因。









