java 强类型语言
注释：
单行注释	//
注释块		/*		*/
文档注释	/**		*/	可以使用javadoc工具来提取这些信息，形成帮助文档

八大数据类型:（1字节8位）
整数：byte(1字节，正负100多) short(2字节，正负3万多) int(4字节,正负20亿左右) long(8字节) 
浮点数: float(4字节,单精度)  double(8字节，双精度)
字符： char(2字节,采用Unicode编码,支持中文，和加减，可以理解成在Unicode编码表中，每个位置对应一个字符，char进行数字的加减时，可以理解成是在编码表中的移动)
布尔型:boolean   在java中表示真或假只能是用true或false	 不可以用1或0

java中声明常量：在变量声明前添加关键字 final  ，且只能进行一次赋值行为

数据类型转换：
1、自动转换(扩宽转换)
	目的类型比原来的类型要大，如：byte-->short,char-->int ,一般要大指的是所占字节数更大
	两种类型是互相兼容的，如 int-->float
2、强制类型转换(缩小转换)
	浮点型转给整形：直接去小数，保留整数
	长的整型赋给短的整型，采用的是去位：先将数字用二进制表示，然后保留低n位（n的值由短的整型占的字节数决定，一字节8位）

char 类型默认值是'\000',只不过显示的时候可能会被转码显示  boolean的默认值是 false
转义符号'\' 	每个转义字符都是由2个符号组成，但是编译器把它当成一个字符


java中的String不是一种简单的数据类型，而是一种类，String类！！！！！！！！！！！！，且是常量,java专门有开辟一个字符串常量池！！！
注意：字符串的内容不会变的，改变的是引用的对象（存储在常量区的字符串）	如：String a="hello" a=a+"tom" 其实是创建了一个新的常量字符串：hellotom，原本的hello还是存在于常量池的   
字符串操作
str.substring(start,end);
str.equals()
Object equals（调用时采用 '==' ）: 比较内存地址是否相等
String equals (调用时采用 str.equals() ): 比较内容是否相等

12节、基本算术运算符与模运算符 
包含浮点数的取模运算结果可能不准确，不建议使用！！！！
对于精度高的运算，需要使用BigDecimal类型，如货币运算等！！
cod1&cod2	逻辑与	会先将两个（即左右,cod1和cod2）条件的真假判断完，再判断整体的真假
cod1&&cod2	短路与	先判断第一个(cod1)，如果为真继续判断下一个(cod2)，如果为假，则停止下一个条件的判断，直接返回结果
| 和 || 跟 &和&&用法差不多
三元运算符：变量=条件?result1(true时返回):result2(false时返回);	如：k=i>=0?i:-i		实现取绝对值功能

switch(表达式){	//表达式类型：byte，short，int，char，String(java7之后才出现)
	case value1:
		程序语句
		break;	//记得加上break，否则程序会默认执行下面的case语句,switch默认只匹配一次，只要一次匹配成功，就一直往下执行，如果没有break的话
	.......
	default:  程序语句	//后面加不加break都行，因为已经执行到最后了
}
value值必须和表达式类型一致，或者兼容，不能出现重复的value值


数组的创建和初始化：
创建数组：
//声明数组，并没有对该数组进行内存空间分配！！！！所以没法进行元素存储，或各种取值操作等，类似的需要new创建的对象都是这样的，注意！！！！
ArrayType arrayName[];	//声明数组	或者 ArrayType[] arrayName; //跟前面那样实现一样的功能，但是第二种比较常用
//分配内存空间
如：double[] array1;//声明数组	array1=new double[5];	//分配内存空间
可以把声明和内存分配合在一起写：如：double[] array2=new double[5]

java中只存在一维数组，多维数组只不过是数组中的数组
创建不规则数组：
第一种方法：直接赋值		第二种方法：只指定第一层的大小
如 int[][] array1={		如：int[][] array2=new int[2][];
	[1,2],				array2[0]=[1,2]
	[1,1,1,3]			array2[1]=[1,2,3,4]
}
对象的默认值是null
new String()和new String("")都是申明一个新的空字符串，是空串不是null；
修饰符：可以修饰类，属性，方法
	private:只有在本类中可以看见,在本类中的main方法中也可以通过类实例访问得到
	protected:在本类或者是同一个包里面可见，在同一个包中的其他类或者本类中的main方法，需要通过类的实例访问
	public:对于所有类都可见,在其他类或者本类中的main方法，需要通过类的实例访问
	默认(无修饰符)：在本类或者是同一个包里面可见----注意：与protected是有区别的，比如在继承的时候是有区别的

构造方法：
如果自己写的类中没有构造方法，则编译器会默认为我们写一个无参的构造方法，就是将类中的属性全部赋为默认的初值
只要自己写了一个有参的构造方法，编译器就不再提供无参的构造方法，如果还要使用，需要自己手动实现

方法的重载：
在一个类中可以有多个重名的方法，只需要他们的参数列表不同，参数列表不同包含：参数次序，个数，类型，至少包含其中一个

java中只有值传递：基本类型好理解，直接传值，引用类型，传递的是引用，而这个引用就是值----->注意！！！！！
及：基本数据类型作为参数，直接操作
    引用类型作为参数，操作的是引用指向的堆内存中的对象,所以如果传递的是引用，则会直接在引用指向的对象上进行操作，若改变一些属性，会直接体现在对象上面

StringBuffer类：  需要大量对字符串进行修改的时候，注意使用如下：url=http://www.cnblogs.com/springcsc/archive/2009/12/03/1616330.html   ！！！！！
StringBuffer类和String一样，也用来代表字符串，只是由于StringBuffer的内部实现方式和String不同，所以StringBuffer在进行字符串处理时，不生成新的对象，在内存使用上要优于String类。
         所以在实际使用时，如果经常需要对一个字符串进行修改，例如插入、删除等操作，使用StringBuffer要更加适合一些。
         在StringBuffer类中存在很多和String类一样的方法，这些方法在功能上和String类中的功能是完全一样的。
但是有一个最显著的区别在于，对于StringBuffer对象的每次修改都会改变对象自身，这点是和String类最大的区别。
         另外由于StringBuffer是线程安全的，关于线程的概念后续有专门的章节进行介绍，所以在多线程程序中也可以很方便的进行使用，但是程序的执行效率相对来说就要稍微慢一些


java中String、StringBuffer、StringBuilder的区别 	url:http://www.cnblogs.com/xudong-bupt/p/3961159.html	！！！！！
1.可变与不可变	
String 不可变	使用字符数组保存字符串  定义如下：private final char value[];	因为有final，所以不可变	
另外两种可变	使用字符数组保存字符串  定义如下：char[] value;	显然是可变的

2.是否多线程安全 
String中的对象是不可变的，也就可以理解为常量，显然线程安全
StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的
StringBuilder并没有对方法进行加同步锁，所以是非线程安全的

3.StringBuilder与StringBuffer共同点
StringBuilder、StringBuffer的方法都会调用AbstractStringBuilder中的公共方法，如super.append(...)。只是StringBuffer会在方法上加synchronized关键字，进行同步。
最后，如果程序不是多线程的，那么使用StringBuilder效率高于StringBuffer。！！！！！！注意

static关键字:
静态属性或方法是在类加载的时候产生的
非静态的属性或方法是在new的时候(及构造对象的时候)产生的
而类加载是早于构造对象的，所以静态方法不能访问非静态变量
1、静态变量
	访问的时候（类名.变量名）
	静态变量是属于类的，和对象没有关系
	非静态变量是属于某个对象的，每个对象都有该数据的副本，而静态变量只有一个
2、静态方法---->用static修饰的方法
	访问静态方法通过（类名.方法名）
	注意：1、静态方法不能访问非静态变量
	      2、非静态方法可以访问静态变量	
3、静态常量	定义方法： public static final type name=value;
还可以有静态语句块，在类里面，如：	static{ 代码段.......	};	可以用于初始化一些类的属性啥的,但注意要是静态的


final关键字:
1、final修饰变量	建议变量名全部使用大写，final修饰的变量只能进行一次赋值，若在程序中重新赋值，编译会报错
2、final修饰方法	任何继承类无法重写覆盖该方法		重载不会受到限制，但是不用再加上final关键字 
3、final修饰类		该类不能作为任何类的父类		类中的方法会全部自动被定义为final类型

封装，继承，多态-----> java的三大特性

继承的概述：
父类，超类，基类
子类，派生类
java不支持多重继承，extends只能继承一个父类，即java只支持单继承关系

1、实现继承
super()：在调用子类的构造器的时候，如果没有显示的写出super，那么编译器会默认加上super()无参构造器。在创建子类的时候，会默认先创建父类
	如果想调用有参的构造器时，需要显示的加上去
super()或super(参数)如果调用，必须放在方法的第一句
创建子类对象的过程就是从底层的基类开始往上，一层层地调用构造方法。

多态：（对于接口也适用）
所谓多态，实际上就是一个对象的多种状态，及一种类的对象引用，可以指向这个类的任何子类对象实例	如：Animal t=new Tiger();  Animal是Tiger的父类

抽象类：关键字 abstract
抽象类提供规范主要通过抽象方法实现：同样也是加上关键字abstract，但是没有方法体
如：public abstract void test1();	就这样，没有{//方法体内的代码}
抽象类中可以有普通方法，但是至少需要有一个普通方法
@override  用来检测是否创建成功
1、一个非抽象类继承了抽象类，就必须要重写该抽象类的所有抽象方法
2、如果一个类没有重写抽象类的抽象方法，则该类也是抽象类

接口：关键字 interface
extends只能是一个，但是implements可以有多个
接口是抽象方法和常量的属性集合
接口中只能够包含抽象方法和常量，不能够有变量，初始化块，构造器
接口的修饰符只有两种：public 和 默认，一般默认也是public
接口内的变量会被设置成共有的，静态的和最终的字段 如：int i=1 -----> public static final int i=1

接口实现的注意事项：
1、为接口中所有的方法提供具体的实现
2、必须遵守重写的所有规则：
	1、子类的重写方法不能抛出更大的异常
	2、子类的重写方法不能有更小的访问范围 如：父类：protected  子类只能是public或protected
	3、保持相同的返回类型
继承（implements）多个接口时：
1、这些接口之间需要使用逗号来分割开
2、如果这几个接口都有相同的方法和相同的变量，那么相同的变量可以通过 接口名.变量名 的形式来访问，相同的方法将被其中的一个接口使用

接口的应用：
接口中方法的修饰符默认都是：public abstract 	
接口类型引用变量：
在一个类继承多个接口时，可以认为这些接口都是这个类的父类，可以类似理解为多态的意思，比如 class test implements t1,t2{}
test t=new test(); ---->可以将t赋给任意一个接口的对象，如：t1 t_1=t;且t_1可以调用t中的任何方法，可以从内存空间角度去理解

接口和抽象类不能直接实例化

内部类：
一个类被嵌套定义在另一个类中，那么这个类就被称为是内部类，外面的类叫外部类
内部类相当于外部类的成员变量
如何构造内部类：		这是对于非静态内部类而言
外部类.内部类 对象名=外部类.new 内部类()		如：Outer.Inner in =out.new Inner();

匿名内部类：（可以联想在添加点击事件的时候，那个new ac...的就是一个匿名内部类）
如：class pa{...}	new pa(){.....};--->相当于实现一个继承pa的子类    interface zi{....}  zi test=new zi(){  实现zi接口中的方法 };--->相当于创建了一个实现了接口zi的一个子类，并且test指向这个子类

局部内部类：
在类的局部位置定义的类叫局部内部类
在局部内部类里面可以访问外部类的所有成员变量
局部内部类访问方法中的局部变量的时候，该局部变量必须声明为final类型

静态内部类：
在内部类前添加static修饰符
静态内部类中可以声明static成员变量，非静态内部类中不可以
静态内部类不可以使用外部类的非静态成员变量
创建静态内部类的对象，不需要其外部类的对象
创建静态内部类的形式：
Outer.Inner i = new Outer.Inner();

如何访问外部类和内部类的属性：
当外部类，内部类，内部类的方法三个拥有同一个变量名的属性时：外部类.this.变量名 (外部类的属性), this.变量名 (内部类的属性), 变量名（该方法中的属性）

如何继承内部类：具体百度吧。。。。

异常处理部分：
Exception 所有异常的父类 ,可以捕获到所有的异常
try:发生异常时，将异常抛出
catch:捕获异常并处理
finally:不管是否发生异常，最后都会执行,就算前面有return语句，也会执行完finally中的语句，再return，但是system.exit(0)，就会强制程序退出，不执行finally中的语句
throw:手动引发一个异常
throws:定义任何被调用方法的异常

异常的分类：
Error：它时java运行时的内部错误以及资源耗尽错误，很那恢复，不期望用户来处理
Exception：分为：1、运行时异常	2、非运行时异常：由环境因素导致的

异常声明：指一个方法不处理它所产生的异常，而是调用层次向上传递，谁调用的这个方法，谁来处理   throws ArithmeticRxception
采用throws将异常抛出	如：public void test() throws ArithmeticRxception{...代码块...}	这部分是程序自己抛出异常,如果要抛出异常，
记得在方法定义的时候加上 throws Exception的类型 ,否则就使用try catch 捕获，进行处理

手动抛出异常:使用 throw exception;  参数Exception表示要抛出的异常对象，该对象时throwable类的子类，而且只能够是一个
如:throw new Exception("这是测试的异常")	在接收异常的时候，可以采用  e.getMassage() 得到异常信息
try catch finally 是可以嵌套使用的

异常链：一个异常内再嵌套一个异常  e1.initCause(e2)

定义自己的异常:
1、创建自己的异常类：1、继承Throwable	2、继承Exception--->一般使用这种		
修饰符 class 类名 extends Exception{
	public MyException(){
		无参的构造方法	
	}
	public MyException(String msg){
		super(msg);
		有参的构造方法	
	}
}
2、使用自己的异常类

try不能单独出现，必须跟着catch或finally，或两者都有


线程：
1、通过继承Thread类创建线程	单继承
class 类名 extends Thread{
	public 类名(String name){
		super(name);	//构造方法，给这个线程起一个名字，也可以使用默认的，不带参数的构造方法
	}
	public void run(){
		该线程要实现的代码	
	}
}
MyThread mt = new MyThread();
mt.start();	这样调用，才是启动多线程功能
mt.run();	这样调用的话，会使mt丧失线程能力，变成主线程的一部分

2、通过实现Runnable接口创建线程	多实现
calss A implements Runnable(){
	public void run(){
	
}
}
A a=new A();	//记得先实例化
Thread t=new Thread(a,name);	//name参数可有可无，就相当于给线程取名字

3、两种方法对比：
第一种继承thread的：如果一个类如果继承了另外一个类，则不能再继承Thread了，所以只能使用第二种方式implements Runnable了

调用start方法之后，是该线程进入就绪状态，并不代表可以立刻执行run方法中的代码了
进入就绪状态后，表示此时该线程拥有获取cpu时间片的权利

多线程应用：
1、多个线程并发执行
java对于线程启动后唯一能保证的是每个线程都能被启动，并且结束。但是对于哪个线程先执行，哪个后执行，什么时候执行，是没有保证的。
2、线程优先级
java中优先级高的线程，有更大的可能性获得cpu，但不是优先级高的总是先执行，也不是优先级低的线程总不执行。
设置优先级  t1.getPriority()---->获取优先级,一般默认的优先级是5		
	   t2.setPriority(优先级数)--->设置优先级，最大为10（MAX_PRIORITY），最低为1(MIN_PRIORITY)

线程调度的三个方法：
1、休眠方法sleep(毫秒数)  sleep(毫秒数,纳秒数)	两种
指定线程休息多长时间，休息结束后，再进入就绪状态，一般调用方法都是Thread.sleep(ms) ,在哪个线程中调用，则休眠哪个线程
2、暂停方法yield()	经常会被误用
假设线程a   线程b   当a获得时间片的时候，调用 a.yield()，则a将资源释放出去，a和b再一起去竞争这个资源,有可能还是被a抢到
3、挂起方法join()
有点类似于插队，当调用join()时，当前线程会优先让调用join()方法的线程先执行完（这个是一定的），再执行当前线程，注：！！是指当前线程退出跟调用join方法的线程竞争cpu时间段，但是其他线程还是会跟调用join方法的线程去竞争cpu时间段,具体可以看代码！！！！！！！！！
如A线程线程执行体中调用B线程的join()方法，则A线程被阻塞，知道B线程执行完为止，A才能得以继续执行

线程同步问题的由来：多个线程共享资源没有进行控制     例如：打印机所有用户都可以共享且没有进行控制，则打印文件时，一个用户要打印的文件会被分好几次才打印完成，及中间可能会插着别的用户打印的文件

同步问题java的解决方案，两种：加上同步之后，就相当于单线程工作
1、同步方法：当线程进入同步方法的时候，会获得同步方法所属对象的锁，一旦获得对象锁，则其他线程不能再执行被锁对象的任何其他同步方法；只有在该同步方法执行完毕之后，释放了锁，其他线程才能获得锁，并执行同步方法
注意：对象(一个对象也可以称为一个类的一个实例，因此对象可能也叫实例)，引用二者的关系！！！！！！
synchronized 方法声明{	} 切记找对方法加上同步锁	  如:public synchronized void 方法名(){	}

2、同步块
synchronized(资源对象){	//需要进行同步的方法	}	资源对象只能写一个，如果要锁定多个对象的话，可以嵌套调用
如果使用同步块的话，当运行到括号结束时，则释放了该对象的同步锁了

例如：在多个教师使用打印机的模型里面，同步方法就是打印机的打印方法，资源对象就是打印机！！！！！类似去理解


线程中的死锁问题：
1、死锁问题：
A线程需要申请资源1才能继续执行，而资源1被线程B所占有。而线程B需要申请资源2才能继续执行，而资源2被线程A所占有。
线程A现在占有资源2，需要请求资源1
线程B现在占有资源1，需要请求资源2	

url:http://www.importnew.com/16453.html    ！！！！！！！！！
在 Java 中可以用 wait、notify 和 notifyAll 来实现线程间的通信
我们可以利用wait()来让一个线程在某些条件下暂停运行。
第一个问题就是，我们怎么在代码里使用wait()呢？因为wait()并不是Thread类下的函数，我们并不能使用Thread.call()
如果某些线程在等待某些条件触发，那当那些条件为真时，你可以用 notify 和 notifyAll 来通知那些等待中的线程重新开始运行。不同之处在于，notify 仅仅通知一个线程，并且我们不知道哪个线程会收到通知，然而 notifyAll 会通知所有等待中的线程。
wait应该永远在被synchronized的背景下和那个被多线程共享的对象上调用
应该永远在while循环，而不是if语句中调用wait。因为线程是在某些条件下等待的
在我们的例子里，即“如果缓冲区队列是满的话，那么生产者线程应该等待”，你可能直觉就会写一个if语句。但if语句存在一些微妙的小问题，导致即使条件没被满足，你的线程也有可能被错误地唤醒。所以如果你不在线程被唤醒后再次使用while循环检查唤醒条件是否被满足，你的程序就有可能会出错
所以应该在线程被唤醒后再次使用while循环检查唤醒条件是否被满足
永远在synchronized的函数或对象里使用wait、notify和notifyAll，不然Java虚拟机会生成 IllegalMonitorStateException。


Object类：
上帝类
问：什么是Object类？
答：Object类存储在java.lang包中，是所有java类(Object类除外)的终极父类。当然，数组也继承了Object类。然而，接口是不继承Object类的
Object类中声明了以下函数:
protected Object clone()
boolean equals(Object obj)
protected void finalize()
Class< > getClass()
int hashCode()
void notify()
void notifyAll()
String toString()
void wait()
void wait(long timeout)
void wait(long timeout, int nanos)
java的任何类都继承了这些函数，并且可以覆盖不被final修饰的函数。例如，没有final修饰的toString()函数可以被覆盖，但是final wait()函数就不行!!!

Object将clone()作为一个本地方法来实现，这意味着它的代码存放在本地的库中。当代码执行的时候，将会检查调用对象的类(或者父类)是否实现了java.lang.Cloneable接口(Object类不实现Cloneable)。如果没有实现这个接口，clone()将会抛出一个检查异常()——java.lang.CloneNotSupportedException,如果实现了这个接口，clone()会创建一个新的对象，并将原来对象的内容复制到新对象，最后返回这个新对象的引用。注意！！！！！！
调用clone()的代码是位于被克隆的类(即CloneDemo类)里面的，所以就不需要覆盖clone()了。但是，如果调用别的类中的clone()，就需要覆盖clone()了。否则，将会看到“clone在Object中是被保护的”提示，因为clone()在Object中的权限是protected。(译者注：protected权限的成员在不同的包中，只有子类对象可以访问。)
数组克隆----->现查，深克隆，浅克隆
Arrays.deepEquals(x, y)------>可以用来比较两个数组是否相等

“==”运算符通过是否引用了同一个对象来判断两个对象是否相等，这被称为“引用相等”。
equals()函数可以用来检查一个对象与调用这个equals()的这个对象是否相等。
Object类默认的equals()进行的是引用比较。如果两个引用是相同的，equals()函数返回true；否则，返回false,若要重写equals函数，需要遵循一些规则，具体百度
像string类就重写了equals方法：
Object equals（调用时采用 '==' ）: 比较内存地址是否相等
String equals (调用时采用 str.equals() ): 比较内容是否相等


finalize:
问：finalize()方法是用来做什么的？----->慎用！！！
答：finalize()方法可以被子类对象所覆盖，然后作为一个终结者，当GC被调用的时候完成最后的清理工作（例如释放系统资源之类）。这就是终止。默认的finalize()方法什么也不做，当被调用时直接返回。

getClass:
问：getClass()方法是用来做什么的？
答： 通过getClass()方法可以得到一个和这个类有关的java.lang.Class对象。返回的Class对象是一个被static synchronized方法封装的代表这个类的对象；例如，static sychronized void foo(){}。这也是指向反射API。因为调用gerClass()的对象的类是在内存中的，保证了类型安全。

hashCode:
问：hashCode()方法是用来做什么的？
答：hashCode()方法返回给调用者此对象的哈希码（其值由一个hash函数计算得来）。这个方法通常用在基于hash的集合类中
在同一个Java程序中，对一个相同的对象，无论调用多少次hashCode()，hashCode()返回的整数必须相同，因此必须保证equals()方法比较的内容不会更改。但不必在另一个相同的Java程序中也保证返回值相同。

toString:
Q1：toString() 方法实现了什么功能？
A1：toString() 方法将根据调用它的对象返回其对象的字符串形式，通常用于debug。
Q2：当 toString() 方法没有被覆盖的时候，返回的字符串通常是什么样子的？
A2：当 toString() 没有被覆盖的时候，返回的字符串格式是 类名@哈希值，哈希值是十六进制的。举例说，假设有一个 Employee 类，toString() 方法返回的结果可能是 Empoyee@1c7b0f4d。



Java中的Set、List、Map的区别：http://developer.51cto.com/art/201309/410205_all.htm
数组是大小固定的，并且同一个数组只能存放类型一样的数据（基本类型/引用类型），JAVA集合可以存储和操作数目不固定的一组数据。 所有的JAVA集合都位于 java.util包中！ JAVA集合只能存放引用类型的的数据，不能存放基本数据类型！！！！这点注意了。

JAVA集合主要分为三种类型： 
Set(集) 
List(列表) 
Map(映射) 
Collection 接口 ：Collection是最基本的集合接口，声明了适用于Set和List的通用方法。 Set 和List 都继承了Conllection,Map
Collection接口的方法： 
boolean add(Object o)      ：向集合中加入一个对象的引用 
void clear()：删除集合中所有的对象，即不再持有这些对象的引用 
boolean isEmpty()    ：判断集合是否为空 
boolean contains(Object o) ： 判断集合中是否持有特定对象的引用 
Iterartor iterator()  ：返回一个Iterator对象，可以用来遍历集合中的元素 	迭代器（Iterator）
boolean remove(Object o) ：从集合中删除一个对象的引用 
int size()       ：返回集合中元素的数目 
Object[] toArray()    ： 返回一个数组，该数组中包括集合中的所有元素 
关于：Iterator() 和toArray() 方法都用于集合的所有的元素，前者返回一个Iterator对象，后者返回一个包含集合中所有元素的数组。
Iterator接口声明了如下方法： 
hasNext()：判断集合中元素是否遍历完毕，如果没有，就返回true 
next() ：返回下一个元素 
remove()：从集合中删除上一个有next()方法返回的元素。

Set(集合):
存入Set的每个元素都必须是唯一的，因为Set不保存重复元素。加入Set的元素必须定义equals()方法以确保对象的唯一性
Set是最简单的一种集合。集合中的对象不按特定的方式排序，并且没有重复对象。 Set接口主要实现了两个实现类：
HashSet： HashSet类按照哈希算法来存取集合中的对象，存取速度比较快 
TreeSet ：TreeSet类实现了SortedSet接口，能够对集合中的对象进行排序。 
Set 的用法：存放的是对象的引用，没有重复对象
Set的add()方法可自动判断对象是否已经存放在集合中，如果添加的是已存在对象的时候，也不会报错，会自动处理，不会重复添加


List(列表)： 
List的特征是其元素以线性方式存储，集合中可以存放重复对象
List接口主要实现类包括：
ArrayList() : 代表长度可以改变得数组。可以对元素进行随机的访问，向ArrayList()中插入与删除元素的速度慢。 
LinkedList(): 在实现中采用链表数据结构。插入和删除速度快，访问速度慢。 

Map(映射):	关于 Map的应用，还有很多，自己去查
Map 是一种把键对象和值对象映射的集合，它的每一个元素都包含一对键对象和值对象
Map没有继承于Collection接口， 从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象
Map 的常用方法： 
1 添加，删除操作： 
Object put(Object key, Object value)： 向集合中加入元素 
Object remove(Object key)： 删除与KEY相关的元素 
void putAll(Map t)：  将来自特定映像的所有元素添加给该映像 
void clear()：从映像中删除所有映射 
2 查询操作： 
Object get(Object key)：获得与关键字key相关的值 。Map集合中的键对象不允许重复，也就说，任意两个键对象通过equals()方法比较的结果都是false.，但是可以将任意多个键独享映射到同一个值对象上。 
boolean containsKey(Object key)： 判断映像中是否存在关键字key 
boolean containsValue(Object value)：判断映像中是否存在值value 
int size()：返回当前映像中映射的数量 
boolean isEmpty() ：判断映像中是否有任何映射
如果添加元素的顺序对你很重要，应该使用 LinkedHashSet或者LinkedHashMap.

java网络编程：http://blog.csdn.net/he90227/article/details/39184247
InetAddress类。该类的功能是代表一个IP地址，并且将IP地址和域名相关的操作方法包含在该类的内部。
TCP编程：
客户端
在客户端网络编程中，首先需要建立连接，在Java API中以java.net.Socket类的对象代表网络连接，所以建立客户端网络连接，也就是创建Socket类型的对象，该对象代表网络连接，示例如下：Socket socket1 = new Socket(“域名/IP地址”,端口号); 如: Socket socket1 = new Socket(“192.168.1.103”,10000);
在Java语言中，数据传输功能由Java IO实现，也就是说只需要从连接中获得输入流和输出流即可，然后将需要发送的数据写入连接对象的输出流中，在发送完成以后从输入流中读取数据即可。实例如下：（这里的输入输出是相对于客户端而言的，输入客户端，输出客户端）
OutputStream os = socket1.getOutputStream(); //获得输出流
os.write(data.getBytes());	//记得将要发送的数据先转换成字节，再发送；如果需要强制发送，可以调用输出流对象中的flush方法实现
InputStream is = socket1.getInputStream();     //获得输入流
byte[] b = new byte[1024];
int n = is.read(b);	//记得创建字节数组用于接收收到的字节流
上面的代码中，分别从socket1这个连接对象获得了输出流和输入流对象，在整个网络编程中，后续的数据交换就变成了IO操作，也就是遵循“请求-响应”模型的规定，先向输出流中写入数据，这些数据会被系统发送出去，然后在从输入流中读取服务器端的反馈信息，这样就完成了一次数据交换过程，当然这个数据交换过程可以多次进行。
当数据交换完成以后，关闭网络连接，关闭流，释放网络连接占用的系统端口和内存等资源，完成网络操作，示例代码如下：
is.close();
os.close();
socket.close();

服务端
服务器端编程的第一个步骤是监听端口，也就是监听是否有客户端连接到达。实现服务器端监听的代码为：ServerSocket ss = new ServerSocket(端口号); 如： ServerSocket ss = new ServerSocket(10000);
如果端口已经被占用，那么将抛出异常。否则将实现监听。
服务器端编程的第二个步骤是获得连接。该步骤的作用是当有客户端连接到达时，建立一个和客户端连接对应的Socket连 接对象，从而释放客户端连接对于服务器端端口的占用。通过获得连接，使得客户端的连接在服务器端获得了保持，另外使得服务器端的端口释放出来，可以继续等待其它的客户端连接。 实现获得连接的代码是：
Socket socket = ss.accept();	//一般每次收到一个客户端的连接，都会创建一个专门的线程去服务一个客户
该代码实现的功能是获得当前连接到服务器端的客户端连接。需要说明的是accept和前面IO部分介绍的read方法一样，都是一个阻塞方法，也就是当无连接时，该方法将阻塞程序的执行，直到连接到达时才执行该行代码。另外获得的连接会在服务器端的该端口注册，这样以后就可以通过在服务器端的注册信息直接通信，而注册以后服务器端的端口就被释放出来，又可以继续接受其它的连接了。
最后记得关闭流和连接：os.close();is.close();socket.close();serverSocket.close();	//别忘了关闭服务器

UDP编程：
使用该种方式无需建立专用的虚拟连接，由于无需建立专用的连接，所以对于服务器的压力要比TCP小很多，所以也是一种常见的网络编程方式。但是使用该种方式最大的不足是传输不可靠，当然也不是说经常丢失，就像大家发短信息一样，理论上存在收不到的可能，这种可能性可能是1%，反正比较小，但是由于这种可能的存在，所以平时我们都觉得重要的事情还是打个电话吧(类似TCP方式)，一般的事情才发短信息(类似UDP方式)

Java API中，实现UDP方式的编程，包含客户端网络编程和服务器端网络编程，主要由两个类实现，分别是：
1、DatagramSocket：
DatagramSocket类实现“网络连接”，包括客户端网络连接和服务器端网络连接。虽然UDP方式的网络通讯不需要建立专用的网络连接，但是毕竟还是需要发送和接收数据，DatagramSocket实现的就是发送数据时的发射器，以及接收数据时的监听器的角色。类比于TCP中的网络连接，该类既可以用于实现客户端连接，也可以用于实现服务器端连接。
2、DatagramPacket：
DatagramPacket类实现对于网络中传输的数据封装，也就是说，该类的对象代表网络中交换的数据。在UDP方式的网络编程中，无论是需要发送的数据还是需要接收的数据，都必须被处理成DatagramPacket类型的对象，该对象中包含发送到的地址、发送到的端口号以及发送的内容等。
和TCP方式的网络传输相比，IO编程在UDP方式的网络编程中变得不是必须的内容，结构也要比TCP方式的网络编程简单一些。

客户端
UDP客户端编程涉及的步骤也是4个部分：建立连接、发送数据、接收数据和关闭连接。
首先介绍UDP方式的网络编程中建立连接的实现。其中UDP方式的建立连接和TCP方式不同，只需要建立一个连接对象即可，不需要指定服务器的IP和端口号码。实现的代码为：DatagramSocket ds = new DatagramSocket();
这样就建立了一个客户端连接，该客户端连接使用系统随机分配的一个本地计算机的未用端口号。在该连接中，不指定服务器端的IP和端口，所以UDP方式的网络连接更像一个发射器，而不是一个具体的连接。可以通过制定连接使用的端口号来创建客户端连接。
DatagramSocket ds = new DatagramSocket(5000);
这样就是使用本地计算机的5000号端口建立了一个连接。一般在建立客户端连接时没有必要指定端口号码。

接着，介绍一下UDP客户端编程中发送数据的实现。在UDP方式的网络编程中，IO技术不是必须的，在发送数据时，需要将需要发送的数据内容首先转换为byte数组，然后将数据内容、服务器IP和服务器端口号一起构造成一个DatagramPacket类型的对象，这样数据的准备就完成了，发送时调用网络连接对象中的send方法发送该对象即可。
byte[] b = s.getBytes();	//将发送的内容转换为byte数组
InetAddress server = InetAddress.getByName(host);	//将服务器IP转换为InetAddress对象 
DatagramPacket sendDp = new DatagramPacket(b,b.length,server,port);	//构造发送的数据包对象                  
ds.send(sendDp);	//发送数据
不管发送的数据内容是什么，都需要转换为byte数组
按照UDP协议的约定，在进行数据传输时，系统只是尽全力传输数据，但是并不保证数据一定被正确传输，如果数据在传输过程中丢失，那就丢失了。

下面介绍一下UDP客户端编程中接收数据的实现:首先构造一个数据缓冲数组，该数组用于存储接收的服务器端反馈数据，该数组的长度必须大于或等于服务器端反馈的实际有效数据的长度。然后以该缓冲数组为基础构造一个DatagramPacket数据包对象，最后调用连接对象的receive方法接收数据即可。
byte[] data = new byte[1024];	//构造缓冲数组
DatagramPacket receiveDP= new DatagramPacket(data,data.length);	//构造数据包对象
ds.receive(receiveDp);	//接收数据，这里注意，receiveDP是预先设定好长度的，但是在receive方法中可以改变
byte[] b = receiveDp.getData(); //获得缓冲数组
int len = receiveDp.getLength(); //获得有效数据长度

UDP方式客户端网络编程的最后一个步骤就是关闭连接。虽然UDP方式不建立专用的虚拟连接，但是连接对象还是需要占用系统资源，所以在使用完成以后必须关闭连接。关闭连接使用连接对象中的close方法即可，实现的代码如下：ds.close();
需要说明的是，和TCP建立连接的方式不同，UDP方式的同一个网络连接对象，可以发送到达不同服务器端IP或端口的数据包，这点是TCP方式无法做到的。

服务端：
UDP方式网络编程的服务器端实现和TCP方式的服务器端实现类似，也是服务器端监听某个端口，然后获得数据包，进行逻辑处理以后将处理以后的结果反馈给客户端，最后关闭网络连接，下面依次进行介绍
首先UDP方式服务器端网络编程需要建立一个连接，该连接监听某个端口，实现的代码为：
DatagramSocket ds = new DatagramSocket(10010);
由于服务器端的端口需要固定，所以一般在建立服务器端连接时，都指定端口号。
接着服务器端就开始接收客户端发送过来的数据，其接收的方法和客户端接收的方法一致，其中receive方法的作用类似于TCP方式中accept方法的作用，该方法也是一个阻塞方法，其作用是接收数据。
接收到客户端发送过来的数据以后，服务器端对该数据进行逻辑处理，然后将处理以后的结果再发送给客户端，在这里发送时就比客户端要麻烦一些，因为服务器端需要获得客户端的IP和客户端使用的端口号，这个都可以从接收到的数据包中获得。示例代码如下：
InetAddress clientIP = receiveDp.getAddress();	 //获得客户端的IP
Int clientPort = receiveDp.getPort();		//获得客户端的端口号
剩下发送部分跟客户端一致
最后，当服务器端实现完成以后，关闭服务器端连接 ds.close();

由于UDP数据传输过程中可能存在丢失，所以在运行该程序时可能会出现程序阻塞的情况（因为没有收到信息，一直阻塞着，等待信息的到来）。如果需要避免该问题，可以将客户端的网络发送部分修改成线程实现。这样就不会阻塞后面的信息发送
在进行网络程序开发时，首先需要分解一下功能的实现，觉得功能是在客户端程序中实现还是在服务器端程序中实现。区分的规则一般是：客户端 程序实现接收用户输入等界面功能，并实现一些基础的校验降低服务器端的压力，而将程序核心的逻辑以及数据存储等功能放在服务器端进行实现。




java的IO流：url：http://www.cnblogs.com/xll1025/p/6418766.html
IO流简单来说就是Input和Output流，IO流主要是用来处理设备之间的数据传输，Java对于数据的操作都是通过流实现，而java用于操作流的对象都在IO包中。
按操作数据分为：字节流和字符流。 如：Reader和InpurStream
按流向分：输入流和输出流。如：InputStream和OutputStream
IO流常用的基类：
* InputStream    ，    OutputStream
字符流的抽象基类：
* Reader       ，         Writer
由上面四个类派生的子类名称都是以其父类名作为子类的后缀：
如：FileReader和FileInputStream

1、字符流
简介：
*字符流中的对象融合了编码表，也就是系统默认的编码表。我们的系统一般都是GBK编码。
* 字符流只用来处理文本数据，字节流用来处理媒体数据。
* 数据最常见的表现方式是文件，字符流用于操作文件的子类一般是FileReader和FileWriter。
字符流读写：
写：
注意事项
* 写入文件后必须要用flush()刷新。！！！记得，最好写入后就调用，确保信息被写入了
* 用完流后记得要关闭流
* 使用流对象要抛出IO异常
* 定义文件路径时，可以用“/”或者“\\”。
* 在创建一个文件时，如果目录下有同名文件将被覆盖。
* 在读取文件时，必须保证该文件已存在，否则出异常
//创建一个FileWriter对象，该对象一被初始化就必须要明确被操作的文件。  
//而且该文件会被创建到指定目录下。如果该目录有同名文件，那么该文件将被覆盖。  
FileWriter fw = new FileWriter("F:\\1.txt");//目的是明确数据要存放的目的地。
//传递一个参数,代表不覆盖已有的数据。并在已有数据的末尾进行数据续写  
FileWriter fw = new FileWriter("F:\\java_Demo\\day9_24\\demo.txt",true);  这个注意，设置参数为true
//关闭流资源，但是关闭之前会刷新一次内部缓冲中的数据（相当于调用了一次flush()）。当我们结束输入时候，必须close();  
fw.close();  


读：
FileReader fr = new FileReader("Demo.txt");  
//String(char[] value , int offest,int count) 分配一个新的String,包含从offest开始的count个字符
//read()方法，不带参数时，一次读取一个字符，并且自动往下读。如果到达末尾则返回-1  
ch=fr.read()
带参数时：
char[] buf=new char[6]
num = fr.read(buf)	//num为读取字符的个数，读取的字符存放在buf中


1. 字符流的缓冲区：BufferedReader和BufferedWreiter
* 缓冲区的出现是为了提高流的操作效率而出现的.
* 需要被提高效率的流作为参数传递给缓冲区的构造函数	！！！注意，是将流作为参数传入
* 在缓冲区中封装了一个数组，存入数据后一次取出
BufferedReader示例：
读取流缓冲区提供了一个一次读一行的方法readline，方便对文本数据的获取。
readline()只返回回车符前面的字符，不返回回车符。如果是复制的话，必须加入newLine()，写入回车符
注意在IO流中使用readline()这个方法的时候，是会把换行符舍去，只保留前面的部分，
所以如果在读取时是用readline()，则在写入的字符串也是用readline()获取的，则最后应该要加上newline()，否则会造成阻塞,一直在等待换行符！！！！
尤其在网络通信的时候
newLine()是java提供的多平台换行符写入方法。
//创建一个字符读取流流对象，和文件关联  
FileReader rw = new FileReader("buf.txt");  
//只要将需要被提高效率的流作为参数传递给缓冲区的构造函数即可  
BufferedReader brw = new BufferedReader(rw); 

//用到缓冲区就必须要刷新  ，这个注意，和之前的io流不一样
for(int x = 1; x < 5; x++) {  
	 bfw.write("abc");  
         bfw.newLine();       //java提供了一个跨平台的换行符newLine();  
         bfw.flush();  
}   
bfw.flush();        //刷新缓冲区  
bfw.close();        //关闭缓冲区，但是必须要先刷新     
fw.close();     //关闭输入流对象   ----->注意：关闭时，缓冲区的对象和流对象都应该关闭



2、字节流
简介：
1、字节流和字符流的基本操作是相同的，但是要想操作媒体流就需要用到字节流。
2、字节流因为操作的是字节，所以可以用来操作媒体文件。（媒体文件也是以字节存储的）
3、读写字节流：InputStream   输入流（读）和OutputStream  输出流（写）	这里的输入输出是相对于程序而言的，输入程序内，输出到程序外
4、字节流操作可以不用刷新流操作。
5、InputStream特有方法：	int available();//返回文件中的字节个数
注：可以利用此方法来指定读取方式中传入数组的长度，从而省去循环判断。但是如果文件较大，而虚拟机启动分配的默认内存一般为64M。当文件过大时，此数组长度所占内存空间就会溢出。所以，此方法慎用，当文件不大时，可以使用。
fos.write(copy,0,len);	fos.write(字节数组,起始,结束)

字节流缓冲区：字节流缓冲区跟字符流缓冲区一样，也是为了提高效率
百度看看有没有现成的

流操作规律
1. 键盘读取，控制台打印
System.out: 对应的标准输出设备：控制台  //它是PrintStream对象，（PrintStream：打印流。OutputStream的子类）
System.in: 对应的标准输入设备：键盘     //它是InputStream对象

/*InputStream ips = System.in;        //从键盘读入输入字节流 
InputStreamReader fr = new InputStreamReader(ips);  //将字节流转成字符流 为了让字节流可以使用字符流中的方法，我们需要转换流。
bufr = new BufferedReader(fr);  */                 //为了提高效率，使用缓冲区操作，将字符流加强，提升效率  
bufr = new BufferedReader(new InputStreamReader(System.in));            //匿名类。InputSteamReader:读取字节并将其解码为字符 
line = bufr.readLine())!=null
流操作的基本规律。  
一、两个明确：(明确体系)  
1. 明确源和目的  
    源：输入流  InputStream  Reader  
    目的：输出流  OutputStream Writer  
  
2. 操作的数据是否是纯文本  
    是： 字符流  
    否： 字节流  
二、明确体系后要明确具体使用的对象  
    通过设备区分：内存，硬盘，键盘  
    目的设备：内存，硬盘，控制台 


Java通过Executors提供四种线程池，分别为：具体百度
newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。
newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。
